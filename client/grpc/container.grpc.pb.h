// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: container.proto
#ifndef GRPC_container_2eproto__INCLUDED
#define GRPC_container_2eproto__INCLUDED

#include "container.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace container {

class ContainerService final {
 public:
  static constexpr char const* service_full_name() {
    return "container.ContainerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateContainer(::grpc::ClientContext* context, const ::container::CreateRequest& request, ::container::CreateReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::container::CreateReply>> AsyncCreateContainer(::grpc::ClientContext* context, const ::container::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::container::CreateReply>>(AsyncCreateContainerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::container::CreateReply>> PrepareAsyncCreateContainer(::grpc::ClientContext* context, const ::container::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::container::CreateReply>>(PrepareAsyncCreateContainerRaw(context, request, cq));
    }
    virtual ::grpc::Status StartContainer(::grpc::ClientContext* context, const ::container::StartRequest& request, ::container::StartReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::container::StartReply>> AsyncStartContainer(::grpc::ClientContext* context, const ::container::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::container::StartReply>>(AsyncStartContainerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::container::StartReply>> PrepareAsyncStartContainer(::grpc::ClientContext* context, const ::container::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::container::StartReply>>(PrepareAsyncStartContainerRaw(context, request, cq));
    }
    virtual ::grpc::Status StopContainer(::grpc::ClientContext* context, const ::container::StopRequest& request, ::container::StopReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::container::StopReply>> AsyncStopContainer(::grpc::ClientContext* context, const ::container::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::container::StopReply>>(AsyncStopContainerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::container::StopReply>> PrepareAsyncStopContainer(::grpc::ClientContext* context, const ::container::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::container::StopReply>>(PrepareAsyncStopContainerRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveContainer(::grpc::ClientContext* context, const ::container::RemoveRequest& request, ::container::RemoveReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::container::RemoveReply>> AsyncRemoveContainer(::grpc::ClientContext* context, const ::container::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::container::RemoveReply>>(AsyncRemoveContainerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::container::RemoveReply>> PrepareAsyncRemoveContainer(::grpc::ClientContext* context, const ::container::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::container::RemoveReply>>(PrepareAsyncRemoveContainerRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateContainer(::grpc::ClientContext* context, const ::container::CreateRequest* request, ::container::CreateReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateContainer(::grpc::ClientContext* context, const ::container::CreateRequest* request, ::container::CreateReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StartContainer(::grpc::ClientContext* context, const ::container::StartRequest* request, ::container::StartReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartContainer(::grpc::ClientContext* context, const ::container::StartRequest* request, ::container::StartReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StopContainer(::grpc::ClientContext* context, const ::container::StopRequest* request, ::container::StopReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopContainer(::grpc::ClientContext* context, const ::container::StopRequest* request, ::container::StopReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveContainer(::grpc::ClientContext* context, const ::container::RemoveRequest* request, ::container::RemoveReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveContainer(::grpc::ClientContext* context, const ::container::RemoveRequest* request, ::container::RemoveReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::container::CreateReply>* AsyncCreateContainerRaw(::grpc::ClientContext* context, const ::container::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::container::CreateReply>* PrepareAsyncCreateContainerRaw(::grpc::ClientContext* context, const ::container::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::container::StartReply>* AsyncStartContainerRaw(::grpc::ClientContext* context, const ::container::StartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::container::StartReply>* PrepareAsyncStartContainerRaw(::grpc::ClientContext* context, const ::container::StartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::container::StopReply>* AsyncStopContainerRaw(::grpc::ClientContext* context, const ::container::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::container::StopReply>* PrepareAsyncStopContainerRaw(::grpc::ClientContext* context, const ::container::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::container::RemoveReply>* AsyncRemoveContainerRaw(::grpc::ClientContext* context, const ::container::RemoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::container::RemoveReply>* PrepareAsyncRemoveContainerRaw(::grpc::ClientContext* context, const ::container::RemoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateContainer(::grpc::ClientContext* context, const ::container::CreateRequest& request, ::container::CreateReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::container::CreateReply>> AsyncCreateContainer(::grpc::ClientContext* context, const ::container::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::container::CreateReply>>(AsyncCreateContainerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::container::CreateReply>> PrepareAsyncCreateContainer(::grpc::ClientContext* context, const ::container::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::container::CreateReply>>(PrepareAsyncCreateContainerRaw(context, request, cq));
    }
    ::grpc::Status StartContainer(::grpc::ClientContext* context, const ::container::StartRequest& request, ::container::StartReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::container::StartReply>> AsyncStartContainer(::grpc::ClientContext* context, const ::container::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::container::StartReply>>(AsyncStartContainerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::container::StartReply>> PrepareAsyncStartContainer(::grpc::ClientContext* context, const ::container::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::container::StartReply>>(PrepareAsyncStartContainerRaw(context, request, cq));
    }
    ::grpc::Status StopContainer(::grpc::ClientContext* context, const ::container::StopRequest& request, ::container::StopReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::container::StopReply>> AsyncStopContainer(::grpc::ClientContext* context, const ::container::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::container::StopReply>>(AsyncStopContainerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::container::StopReply>> PrepareAsyncStopContainer(::grpc::ClientContext* context, const ::container::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::container::StopReply>>(PrepareAsyncStopContainerRaw(context, request, cq));
    }
    ::grpc::Status RemoveContainer(::grpc::ClientContext* context, const ::container::RemoveRequest& request, ::container::RemoveReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::container::RemoveReply>> AsyncRemoveContainer(::grpc::ClientContext* context, const ::container::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::container::RemoveReply>>(AsyncRemoveContainerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::container::RemoveReply>> PrepareAsyncRemoveContainer(::grpc::ClientContext* context, const ::container::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::container::RemoveReply>>(PrepareAsyncRemoveContainerRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateContainer(::grpc::ClientContext* context, const ::container::CreateRequest* request, ::container::CreateReply* response, std::function<void(::grpc::Status)>) override;
      void CreateContainer(::grpc::ClientContext* context, const ::container::CreateRequest* request, ::container::CreateReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StartContainer(::grpc::ClientContext* context, const ::container::StartRequest* request, ::container::StartReply* response, std::function<void(::grpc::Status)>) override;
      void StartContainer(::grpc::ClientContext* context, const ::container::StartRequest* request, ::container::StartReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StopContainer(::grpc::ClientContext* context, const ::container::StopRequest* request, ::container::StopReply* response, std::function<void(::grpc::Status)>) override;
      void StopContainer(::grpc::ClientContext* context, const ::container::StopRequest* request, ::container::StopReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveContainer(::grpc::ClientContext* context, const ::container::RemoveRequest* request, ::container::RemoveReply* response, std::function<void(::grpc::Status)>) override;
      void RemoveContainer(::grpc::ClientContext* context, const ::container::RemoveRequest* request, ::container::RemoveReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::container::CreateReply>* AsyncCreateContainerRaw(::grpc::ClientContext* context, const ::container::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::container::CreateReply>* PrepareAsyncCreateContainerRaw(::grpc::ClientContext* context, const ::container::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::container::StartReply>* AsyncStartContainerRaw(::grpc::ClientContext* context, const ::container::StartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::container::StartReply>* PrepareAsyncStartContainerRaw(::grpc::ClientContext* context, const ::container::StartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::container::StopReply>* AsyncStopContainerRaw(::grpc::ClientContext* context, const ::container::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::container::StopReply>* PrepareAsyncStopContainerRaw(::grpc::ClientContext* context, const ::container::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::container::RemoveReply>* AsyncRemoveContainerRaw(::grpc::ClientContext* context, const ::container::RemoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::container::RemoveReply>* PrepareAsyncRemoveContainerRaw(::grpc::ClientContext* context, const ::container::RemoveRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateContainer_;
    const ::grpc::internal::RpcMethod rpcmethod_StartContainer_;
    const ::grpc::internal::RpcMethod rpcmethod_StopContainer_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveContainer_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateContainer(::grpc::ServerContext* context, const ::container::CreateRequest* request, ::container::CreateReply* response);
    virtual ::grpc::Status StartContainer(::grpc::ServerContext* context, const ::container::StartRequest* request, ::container::StartReply* response);
    virtual ::grpc::Status StopContainer(::grpc::ServerContext* context, const ::container::StopRequest* request, ::container::StopReply* response);
    virtual ::grpc::Status RemoveContainer(::grpc::ServerContext* context, const ::container::RemoveRequest* request, ::container::RemoveReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateContainer() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateContainer(::grpc::ServerContext* /*context*/, const ::container::CreateRequest* /*request*/, ::container::CreateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateContainer(::grpc::ServerContext* context, ::container::CreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::container::CreateReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartContainer() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StartContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartContainer(::grpc::ServerContext* /*context*/, const ::container::StartRequest* /*request*/, ::container::StartReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartContainer(::grpc::ServerContext* context, ::container::StartRequest* request, ::grpc::ServerAsyncResponseWriter< ::container::StartReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopContainer() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StopContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopContainer(::grpc::ServerContext* /*context*/, const ::container::StopRequest* /*request*/, ::container::StopReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopContainer(::grpc::ServerContext* context, ::container::StopRequest* request, ::grpc::ServerAsyncResponseWriter< ::container::StopReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveContainer() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RemoveContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveContainer(::grpc::ServerContext* /*context*/, const ::container::RemoveRequest* /*request*/, ::container::RemoveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveContainer(::grpc::ServerContext* context, ::container::RemoveRequest* request, ::grpc::ServerAsyncResponseWriter< ::container::RemoveReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateContainer<WithAsyncMethod_StartContainer<WithAsyncMethod_StopContainer<WithAsyncMethod_RemoveContainer<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateContainer() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::container::CreateRequest, ::container::CreateReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::container::CreateRequest* request, ::container::CreateReply* response) { return this->CreateContainer(context, request, response); }));}
    void SetMessageAllocatorFor_CreateContainer(
        ::grpc::MessageAllocator< ::container::CreateRequest, ::container::CreateReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::container::CreateRequest, ::container::CreateReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateContainer(::grpc::ServerContext* /*context*/, const ::container::CreateRequest* /*request*/, ::container::CreateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateContainer(
      ::grpc::CallbackServerContext* /*context*/, const ::container::CreateRequest* /*request*/, ::container::CreateReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StartContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StartContainer() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::container::StartRequest, ::container::StartReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::container::StartRequest* request, ::container::StartReply* response) { return this->StartContainer(context, request, response); }));}
    void SetMessageAllocatorFor_StartContainer(
        ::grpc::MessageAllocator< ::container::StartRequest, ::container::StartReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::container::StartRequest, ::container::StartReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StartContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartContainer(::grpc::ServerContext* /*context*/, const ::container::StartRequest* /*request*/, ::container::StartReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartContainer(
      ::grpc::CallbackServerContext* /*context*/, const ::container::StartRequest* /*request*/, ::container::StartReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StopContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StopContainer() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::container::StopRequest, ::container::StopReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::container::StopRequest* request, ::container::StopReply* response) { return this->StopContainer(context, request, response); }));}
    void SetMessageAllocatorFor_StopContainer(
        ::grpc::MessageAllocator< ::container::StopRequest, ::container::StopReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::container::StopRequest, ::container::StopReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StopContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopContainer(::grpc::ServerContext* /*context*/, const ::container::StopRequest* /*request*/, ::container::StopReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopContainer(
      ::grpc::CallbackServerContext* /*context*/, const ::container::StopRequest* /*request*/, ::container::StopReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveContainer() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::container::RemoveRequest, ::container::RemoveReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::container::RemoveRequest* request, ::container::RemoveReply* response) { return this->RemoveContainer(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveContainer(
        ::grpc::MessageAllocator< ::container::RemoveRequest, ::container::RemoveReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::container::RemoveRequest, ::container::RemoveReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveContainer(::grpc::ServerContext* /*context*/, const ::container::RemoveRequest* /*request*/, ::container::RemoveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveContainer(
      ::grpc::CallbackServerContext* /*context*/, const ::container::RemoveRequest* /*request*/, ::container::RemoveReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateContainer<WithCallbackMethod_StartContainer<WithCallbackMethod_StopContainer<WithCallbackMethod_RemoveContainer<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateContainer() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateContainer(::grpc::ServerContext* /*context*/, const ::container::CreateRequest* /*request*/, ::container::CreateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartContainer() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StartContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartContainer(::grpc::ServerContext* /*context*/, const ::container::StartRequest* /*request*/, ::container::StartReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopContainer() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StopContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopContainer(::grpc::ServerContext* /*context*/, const ::container::StopRequest* /*request*/, ::container::StopReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveContainer() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RemoveContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveContainer(::grpc::ServerContext* /*context*/, const ::container::RemoveRequest* /*request*/, ::container::RemoveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateContainer() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateContainer(::grpc::ServerContext* /*context*/, const ::container::CreateRequest* /*request*/, ::container::CreateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateContainer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartContainer() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StartContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartContainer(::grpc::ServerContext* /*context*/, const ::container::StartRequest* /*request*/, ::container::StartReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartContainer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopContainer() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StopContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopContainer(::grpc::ServerContext* /*context*/, const ::container::StopRequest* /*request*/, ::container::StopReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopContainer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveContainer() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RemoveContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveContainer(::grpc::ServerContext* /*context*/, const ::container::RemoveRequest* /*request*/, ::container::RemoveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveContainer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateContainer() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateContainer(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateContainer(::grpc::ServerContext* /*context*/, const ::container::CreateRequest* /*request*/, ::container::CreateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateContainer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StartContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StartContainer() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartContainer(context, request, response); }));
    }
    ~WithRawCallbackMethod_StartContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartContainer(::grpc::ServerContext* /*context*/, const ::container::StartRequest* /*request*/, ::container::StartReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartContainer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StopContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StopContainer() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopContainer(context, request, response); }));
    }
    ~WithRawCallbackMethod_StopContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopContainer(::grpc::ServerContext* /*context*/, const ::container::StopRequest* /*request*/, ::container::StopReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopContainer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveContainer() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveContainer(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveContainer(::grpc::ServerContext* /*context*/, const ::container::RemoveRequest* /*request*/, ::container::RemoveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveContainer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateContainer() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::container::CreateRequest, ::container::CreateReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::container::CreateRequest, ::container::CreateReply>* streamer) {
                       return this->StreamedCreateContainer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateContainer(::grpc::ServerContext* /*context*/, const ::container::CreateRequest* /*request*/, ::container::CreateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateContainer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::container::CreateRequest,::container::CreateReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartContainer() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::container::StartRequest, ::container::StartReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::container::StartRequest, ::container::StartReply>* streamer) {
                       return this->StreamedStartContainer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartContainer(::grpc::ServerContext* /*context*/, const ::container::StartRequest* /*request*/, ::container::StartReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartContainer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::container::StartRequest,::container::StartReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopContainer() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::container::StopRequest, ::container::StopReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::container::StopRequest, ::container::StopReply>* streamer) {
                       return this->StreamedStopContainer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StopContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopContainer(::grpc::ServerContext* /*context*/, const ::container::StopRequest* /*request*/, ::container::StopReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopContainer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::container::StopRequest,::container::StopReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveContainer() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::container::RemoveRequest, ::container::RemoveReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::container::RemoveRequest, ::container::RemoveReply>* streamer) {
                       return this->StreamedRemoveContainer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveContainer(::grpc::ServerContext* /*context*/, const ::container::RemoveRequest* /*request*/, ::container::RemoveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveContainer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::container::RemoveRequest,::container::RemoveReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateContainer<WithStreamedUnaryMethod_StartContainer<WithStreamedUnaryMethod_StopContainer<WithStreamedUnaryMethod_RemoveContainer<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateContainer<WithStreamedUnaryMethod_StartContainer<WithStreamedUnaryMethod_StopContainer<WithStreamedUnaryMethod_RemoveContainer<Service > > > > StreamedService;
};

}  // namespace container


#endif  // GRPC_container_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_image_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_image_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_image_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_image_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_image_2eproto;
namespace image {
class PullImageReply;
struct PullImageReplyDefaultTypeInternal;
extern PullImageReplyDefaultTypeInternal _PullImageReply_default_instance_;
class PullImageRequest;
struct PullImageRequestDefaultTypeInternal;
extern PullImageRequestDefaultTypeInternal _PullImageRequest_default_instance_;
class RemoveImageReply;
struct RemoveImageReplyDefaultTypeInternal;
extern RemoveImageReplyDefaultTypeInternal _RemoveImageReply_default_instance_;
class RemoveImageRequest;
struct RemoveImageRequestDefaultTypeInternal;
extern RemoveImageRequestDefaultTypeInternal _RemoveImageRequest_default_instance_;
}  // namespace image
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace image {

// ===================================================================


// -------------------------------------------------------------------

class RemoveImageRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:image.RemoveImageRequest) */ {
 public:
  inline RemoveImageRequest() : RemoveImageRequest(nullptr) {}
  ~RemoveImageRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RemoveImageRequest(::google::protobuf::internal::ConstantInitialized);

  inline RemoveImageRequest(const RemoveImageRequest& from)
      : RemoveImageRequest(nullptr, from) {}
  RemoveImageRequest(RemoveImageRequest&& from) noexcept
    : RemoveImageRequest() {
    *this = ::std::move(from);
  }

  inline RemoveImageRequest& operator=(const RemoveImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveImageRequest& operator=(RemoveImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveImageRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveImageRequest*>(
               &_RemoveImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RemoveImageRequest& a, RemoveImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveImageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveImageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveImageRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveImageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RemoveImageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RemoveImageRequest& from) {
    RemoveImageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RemoveImageRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "image.RemoveImageRequest";
  }
  protected:
  explicit RemoveImageRequest(::google::protobuf::Arena* arena);
  RemoveImageRequest(::google::protobuf::Arena* arena, const RemoveImageRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
    kForceFieldNumber = 2,
  };
  // string image = 1;
  void clear_image() ;
  const std::string& image() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image(Arg_&& arg, Args_... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* value);

  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(
      const std::string& value);
  std::string* _internal_mutable_image();

  public:
  // bool force = 2;
  void clear_force() ;
  bool force() const;
  void set_force(bool value);

  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);

  public:
  // @@protoc_insertion_point(class_scope:image.RemoveImageRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      38, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr image_;
    bool force_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_image_2eproto;
};// -------------------------------------------------------------------

class RemoveImageReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:image.RemoveImageReply) */ {
 public:
  inline RemoveImageReply() : RemoveImageReply(nullptr) {}
  ~RemoveImageReply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RemoveImageReply(::google::protobuf::internal::ConstantInitialized);

  inline RemoveImageReply(const RemoveImageReply& from)
      : RemoveImageReply(nullptr, from) {}
  RemoveImageReply(RemoveImageReply&& from) noexcept
    : RemoveImageReply() {
    *this = ::std::move(from);
  }

  inline RemoveImageReply& operator=(const RemoveImageReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveImageReply& operator=(RemoveImageReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveImageReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveImageReply* internal_default_instance() {
    return reinterpret_cast<const RemoveImageReply*>(
               &_RemoveImageReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RemoveImageReply& a, RemoveImageReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveImageReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveImageReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveImageReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveImageReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RemoveImageReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RemoveImageReply& from) {
    RemoveImageReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RemoveImageReply* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "image.RemoveImageReply";
  }
  protected:
  explicit RemoveImageReply(::google::protobuf::Arena* arena);
  RemoveImageReply(::google::protobuf::Arena* arena, const RemoveImageReply& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 1,
  };
  // string errmsg = 1;
  void clear_errmsg() ;
  const std::string& errmsg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_errmsg(Arg_&& arg, Args_... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* value);

  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(
      const std::string& value);
  std::string* _internal_mutable_errmsg();

  public:
  // @@protoc_insertion_point(class_scope:image.RemoveImageReply)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      37, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr errmsg_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_image_2eproto;
};// -------------------------------------------------------------------

class PullImageRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:image.PullImageRequest) */ {
 public:
  inline PullImageRequest() : PullImageRequest(nullptr) {}
  ~PullImageRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PullImageRequest(::google::protobuf::internal::ConstantInitialized);

  inline PullImageRequest(const PullImageRequest& from)
      : PullImageRequest(nullptr, from) {}
  PullImageRequest(PullImageRequest&& from) noexcept
    : PullImageRequest() {
    *this = ::std::move(from);
  }

  inline PullImageRequest& operator=(const PullImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullImageRequest& operator=(PullImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PullImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PullImageRequest* internal_default_instance() {
    return reinterpret_cast<const PullImageRequest*>(
               &_PullImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PullImageRequest& a, PullImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PullImageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullImageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PullImageRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PullImageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PullImageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PullImageRequest& from) {
    PullImageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PullImageRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "image.PullImageRequest";
  }
  protected:
  explicit PullImageRequest(::google::protobuf::Arena* arena);
  PullImageRequest(::google::protobuf::Arena* arena, const PullImageRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
  };
  // string image = 1;
  void clear_image() ;
  const std::string& image() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image(Arg_&& arg, Args_... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* value);

  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(
      const std::string& value);
  std::string* _internal_mutable_image();

  public:
  // @@protoc_insertion_point(class_scope:image.PullImageRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      36, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr image_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_image_2eproto;
};// -------------------------------------------------------------------

class PullImageReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:image.PullImageReply) */ {
 public:
  inline PullImageReply() : PullImageReply(nullptr) {}
  ~PullImageReply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PullImageReply(::google::protobuf::internal::ConstantInitialized);

  inline PullImageReply(const PullImageReply& from)
      : PullImageReply(nullptr, from) {}
  PullImageReply(PullImageReply&& from) noexcept
    : PullImageReply() {
    *this = ::std::move(from);
  }

  inline PullImageReply& operator=(const PullImageReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullImageReply& operator=(PullImageReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PullImageReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const PullImageReply* internal_default_instance() {
    return reinterpret_cast<const PullImageReply*>(
               &_PullImageReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PullImageReply& a, PullImageReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PullImageReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullImageReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PullImageReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PullImageReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PullImageReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PullImageReply& from) {
    PullImageReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PullImageReply* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "image.PullImageReply";
  }
  protected:
  explicit PullImageReply(::google::protobuf::Arena* arena);
  PullImageReply(::google::protobuf::Arena* arena, const PullImageReply& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageRefFieldNumber = 1,
    kErrmsgFieldNumber = 2,
  };
  // string image_ref = 1;
  void clear_image_ref() ;
  const std::string& image_ref() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image_ref(Arg_&& arg, Args_... args);
  std::string* mutable_image_ref();
  PROTOBUF_NODISCARD std::string* release_image_ref();
  void set_allocated_image_ref(std::string* value);

  private:
  const std::string& _internal_image_ref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_ref(
      const std::string& value);
  std::string* _internal_mutable_image_ref();

  public:
  // string errmsg = 2;
  void clear_errmsg() ;
  const std::string& errmsg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_errmsg(Arg_&& arg, Args_... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* value);

  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(
      const std::string& value);
  std::string* _internal_mutable_errmsg();

  public:
  // @@protoc_insertion_point(class_scope:image.PullImageReply)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      44, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr image_ref_;
    ::google::protobuf::internal::ArenaStringPtr errmsg_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_image_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PullImageRequest

// string image = 1;
inline void PullImageRequest::clear_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_.ClearToEmpty();
}
inline const std::string& PullImageRequest::image() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:image.PullImageRequest.image)
  return _internal_image();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PullImageRequest::set_image(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:image.PullImageRequest.image)
}
inline std::string* PullImageRequest::mutable_image() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:image.PullImageRequest.image)
  return _s;
}
inline const std::string& PullImageRequest::_internal_image() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.image_.Get();
}
inline void PullImageRequest::_internal_set_image(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_.Set(value, GetArena());
}
inline std::string* PullImageRequest::_internal_mutable_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.image_.Mutable( GetArena());
}
inline std::string* PullImageRequest::release_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:image.PullImageRequest.image)
  return _impl_.image_.Release();
}
inline void PullImageRequest::set_allocated_image(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.image_.IsDefault()) {
          _impl_.image_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:image.PullImageRequest.image)
}

// -------------------------------------------------------------------

// PullImageReply

// string image_ref = 1;
inline void PullImageReply::clear_image_ref() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_ref_.ClearToEmpty();
}
inline const std::string& PullImageReply::image_ref() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:image.PullImageReply.image_ref)
  return _internal_image_ref();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PullImageReply::set_image_ref(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_ref_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:image.PullImageReply.image_ref)
}
inline std::string* PullImageReply::mutable_image_ref() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_image_ref();
  // @@protoc_insertion_point(field_mutable:image.PullImageReply.image_ref)
  return _s;
}
inline const std::string& PullImageReply::_internal_image_ref() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.image_ref_.Get();
}
inline void PullImageReply::_internal_set_image_ref(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_ref_.Set(value, GetArena());
}
inline std::string* PullImageReply::_internal_mutable_image_ref() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.image_ref_.Mutable( GetArena());
}
inline std::string* PullImageReply::release_image_ref() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:image.PullImageReply.image_ref)
  return _impl_.image_ref_.Release();
}
inline void PullImageReply::set_allocated_image_ref(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_ref_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.image_ref_.IsDefault()) {
          _impl_.image_ref_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:image.PullImageReply.image_ref)
}

// string errmsg = 2;
inline void PullImageReply::clear_errmsg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& PullImageReply::errmsg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:image.PullImageReply.errmsg)
  return _internal_errmsg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PullImageReply::set_errmsg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.errmsg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:image.PullImageReply.errmsg)
}
inline std::string* PullImageReply::mutable_errmsg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:image.PullImageReply.errmsg)
  return _s;
}
inline const std::string& PullImageReply::_internal_errmsg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.errmsg_.Get();
}
inline void PullImageReply::_internal_set_errmsg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.errmsg_.Set(value, GetArena());
}
inline std::string* PullImageReply::_internal_mutable_errmsg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.errmsg_.Mutable( GetArena());
}
inline std::string* PullImageReply::release_errmsg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:image.PullImageReply.errmsg)
  return _impl_.errmsg_.Release();
}
inline void PullImageReply::set_allocated_errmsg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errmsg_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.errmsg_.IsDefault()) {
          _impl_.errmsg_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:image.PullImageReply.errmsg)
}

// -------------------------------------------------------------------

// RemoveImageRequest

// string image = 1;
inline void RemoveImageRequest::clear_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_.ClearToEmpty();
}
inline const std::string& RemoveImageRequest::image() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:image.RemoveImageRequest.image)
  return _internal_image();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoveImageRequest::set_image(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:image.RemoveImageRequest.image)
}
inline std::string* RemoveImageRequest::mutable_image() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:image.RemoveImageRequest.image)
  return _s;
}
inline const std::string& RemoveImageRequest::_internal_image() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.image_.Get();
}
inline void RemoveImageRequest::_internal_set_image(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_.Set(value, GetArena());
}
inline std::string* RemoveImageRequest::_internal_mutable_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.image_.Mutable( GetArena());
}
inline std::string* RemoveImageRequest::release_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:image.RemoveImageRequest.image)
  return _impl_.image_.Release();
}
inline void RemoveImageRequest::set_allocated_image(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.image_.IsDefault()) {
          _impl_.image_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:image.RemoveImageRequest.image)
}

// bool force = 2;
inline void RemoveImageRequest::clear_force() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.force_ = false;
}
inline bool RemoveImageRequest::force() const {
  // @@protoc_insertion_point(field_get:image.RemoveImageRequest.force)
  return _internal_force();
}
inline void RemoveImageRequest::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:image.RemoveImageRequest.force)
}
inline bool RemoveImageRequest::_internal_force() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.force_;
}
inline void RemoveImageRequest::_internal_set_force(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.force_ = value;
}

// -------------------------------------------------------------------

// RemoveImageReply

// string errmsg = 1;
inline void RemoveImageReply::clear_errmsg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& RemoveImageReply::errmsg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:image.RemoveImageReply.errmsg)
  return _internal_errmsg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoveImageReply::set_errmsg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.errmsg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:image.RemoveImageReply.errmsg)
}
inline std::string* RemoveImageReply::mutable_errmsg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:image.RemoveImageReply.errmsg)
  return _s;
}
inline const std::string& RemoveImageReply::_internal_errmsg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.errmsg_.Get();
}
inline void RemoveImageReply::_internal_set_errmsg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.errmsg_.Set(value, GetArena());
}
inline std::string* RemoveImageReply::_internal_mutable_errmsg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.errmsg_.Mutable( GetArena());
}
inline std::string* RemoveImageReply::release_errmsg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:image.RemoveImageReply.errmsg)
  return _impl_.errmsg_.Release();
}
inline void RemoveImageReply::set_allocated_errmsg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errmsg_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.errmsg_.IsDefault()) {
          _impl_.errmsg_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:image.RemoveImageReply.errmsg)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace image


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_image_2eproto_2epb_2eh

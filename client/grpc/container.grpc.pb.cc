// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: container.proto

#include "container.pb.h"
#include "container.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace container {

static const char* ContainerService_method_names[] = {
  "/container.ContainerService/CreateContainer",
  "/container.ContainerService/StartContainer",
  "/container.ContainerService/StopContainer",
  "/container.ContainerService/RemoveContainer",
};

std::unique_ptr< ContainerService::Stub> ContainerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ContainerService::Stub> stub(new ContainerService::Stub(channel, options));
  return stub;
}

ContainerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateContainer_(ContainerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartContainer_(ContainerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopContainer_(ContainerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveContainer_(ContainerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ContainerService::Stub::CreateContainer(::grpc::ClientContext* context, const ::container::CreateRequest& request, ::container::CreateReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::container::CreateRequest, ::container::CreateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateContainer_, context, request, response);
}

void ContainerService::Stub::async::CreateContainer(::grpc::ClientContext* context, const ::container::CreateRequest* request, ::container::CreateReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::container::CreateRequest, ::container::CreateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateContainer_, context, request, response, std::move(f));
}

void ContainerService::Stub::async::CreateContainer(::grpc::ClientContext* context, const ::container::CreateRequest* request, ::container::CreateReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateContainer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::container::CreateReply>* ContainerService::Stub::PrepareAsyncCreateContainerRaw(::grpc::ClientContext* context, const ::container::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::container::CreateReply, ::container::CreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateContainer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::container::CreateReply>* ContainerService::Stub::AsyncCreateContainerRaw(::grpc::ClientContext* context, const ::container::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateContainerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ContainerService::Stub::StartContainer(::grpc::ClientContext* context, const ::container::StartRequest& request, ::container::StartReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::container::StartRequest, ::container::StartReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartContainer_, context, request, response);
}

void ContainerService::Stub::async::StartContainer(::grpc::ClientContext* context, const ::container::StartRequest* request, ::container::StartReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::container::StartRequest, ::container::StartReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartContainer_, context, request, response, std::move(f));
}

void ContainerService::Stub::async::StartContainer(::grpc::ClientContext* context, const ::container::StartRequest* request, ::container::StartReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartContainer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::container::StartReply>* ContainerService::Stub::PrepareAsyncStartContainerRaw(::grpc::ClientContext* context, const ::container::StartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::container::StartReply, ::container::StartRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartContainer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::container::StartReply>* ContainerService::Stub::AsyncStartContainerRaw(::grpc::ClientContext* context, const ::container::StartRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartContainerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ContainerService::Stub::StopContainer(::grpc::ClientContext* context, const ::container::StopRequest& request, ::container::StopReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::container::StopRequest, ::container::StopReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopContainer_, context, request, response);
}

void ContainerService::Stub::async::StopContainer(::grpc::ClientContext* context, const ::container::StopRequest* request, ::container::StopReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::container::StopRequest, ::container::StopReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopContainer_, context, request, response, std::move(f));
}

void ContainerService::Stub::async::StopContainer(::grpc::ClientContext* context, const ::container::StopRequest* request, ::container::StopReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopContainer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::container::StopReply>* ContainerService::Stub::PrepareAsyncStopContainerRaw(::grpc::ClientContext* context, const ::container::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::container::StopReply, ::container::StopRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopContainer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::container::StopReply>* ContainerService::Stub::AsyncStopContainerRaw(::grpc::ClientContext* context, const ::container::StopRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopContainerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ContainerService::Stub::RemoveContainer(::grpc::ClientContext* context, const ::container::RemoveRequest& request, ::container::RemoveReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::container::RemoveRequest, ::container::RemoveReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveContainer_, context, request, response);
}

void ContainerService::Stub::async::RemoveContainer(::grpc::ClientContext* context, const ::container::RemoveRequest* request, ::container::RemoveReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::container::RemoveRequest, ::container::RemoveReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveContainer_, context, request, response, std::move(f));
}

void ContainerService::Stub::async::RemoveContainer(::grpc::ClientContext* context, const ::container::RemoveRequest* request, ::container::RemoveReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveContainer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::container::RemoveReply>* ContainerService::Stub::PrepareAsyncRemoveContainerRaw(::grpc::ClientContext* context, const ::container::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::container::RemoveReply, ::container::RemoveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveContainer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::container::RemoveReply>* ContainerService::Stub::AsyncRemoveContainerRaw(::grpc::ClientContext* context, const ::container::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveContainerRaw(context, request, cq);
  result->StartCall();
  return result;
}

ContainerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::container::CreateRequest, ::container::CreateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ContainerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::container::CreateRequest* req,
             ::container::CreateReply* resp) {
               return service->CreateContainer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::container::StartRequest, ::container::StartReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ContainerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::container::StartRequest* req,
             ::container::StartReply* resp) {
               return service->StartContainer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::container::StopRequest, ::container::StopReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ContainerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::container::StopRequest* req,
             ::container::StopReply* resp) {
               return service->StopContainer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ContainerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ContainerService::Service, ::container::RemoveRequest, ::container::RemoveReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ContainerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::container::RemoveRequest* req,
             ::container::RemoveReply* resp) {
               return service->RemoveContainer(ctx, req, resp);
             }, this)));
}

ContainerService::Service::~Service() {
}

::grpc::Status ContainerService::Service::CreateContainer(::grpc::ServerContext* context, const ::container::CreateRequest* request, ::container::CreateReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::StartContainer(::grpc::ServerContext* context, const ::container::StartRequest* request, ::container::StartReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::StopContainer(::grpc::ServerContext* context, const ::container::StopRequest* request, ::container::StopReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ContainerService::Service::RemoveContainer(::grpc::ServerContext* context, const ::container::RemoveRequest* request, ::container::RemoveReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace container

